{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","copyToClipboard","e","generatePairs","base","Math","ceil","random","setState","publickey","privatekey","pow","enCryptWithPublic","message","newmessage","convertToHex","currenthash","deCryptWithPrivate","encrypted","console","log","hiddenvalue","convertFromHex","state","hex","toString","str","i","length","String","fromCharCode","parseInt","substr","charCodeAt","b","match","reduce","acc","h","split","input","map","char","binary","pad","max","repeat","join","bytesLeft","result","byte","_this2","react_default","a","createElement","defineProperty","className","Container","Row","Col","style","borderColor","width","Button","margin","onClick","variant","InputGroup","Prepend","lib","text","FormControl","placeholder","value","color","fontSize","marginTop","md","sm","align","onChange","currentpublickey","target","currenthashedvalue","fontStyle","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2fd17b81.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { Container, Row, Col, Button, InputGroup, FormControl } from 'react-bootstrap';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\n\nclass easyKeyPair {\n  generatePairs = () => {\n    const base = Math.ceil(Math.random() * 193204900099096776)\n    console.log('public key: ', base)\n    console.log('private key: ', Math.pow(base, 2))\n  }\n}\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      publickey: '',\n      privatekey: '',\n      currenthash: '',\n      hiddenvalue: ''\n    }\n  }\n\n  copyToClipboard = (e) => {\n\n  };\n\n\n  convertFromHex(hex) {\n    var hex = hex.toString();//force conversion\n    var str = '';\n    for (var i = 0; i < hex.length; i += 2)\n      str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n    return str;\n  }\n\n  convertToHex(str) {\n    var hex = '';\n    for (var i = 0; i < str.length; i++) {\n      hex += '' + str.charCodeAt(i).toString(16);\n    }\n    return hex;\n  }\n\n  bin2hex(b) {\n    return b.match(/.{4}/g).reduce(function (acc, i) {\n      return acc + parseInt(i, 2).toString(16);\n    }, '')\n  }\n\n  hex2bin(h) {\n    return h.split('').reduce(function (acc, i) {\n      return acc + ('000' + parseInt(i, 16).toString(2)).substr(-4, 4);\n    }, '')\n  }\n\n  stringToBinary(input) {\n    var characters = input.split('');\n\n    return characters.map(function (char) {\n      const binary = char.charCodeAt(0).toString(2)\n      const pad = Math.max(8 - binary.length, 0);\n      // Just to make sure it is 8 bits long.\n      return '0'.repeat(pad) + binary;\n    }).join('');\n  }\n\n  binaryToString(input) {\n    let bytesLeft = input;\n    let result = '';\n\n    // Check if we have some bytes left\n    while (bytesLeft.length) {\n      // Get the first digits\n      const byte = bytesLeft.substr(0, 8);\n      bytesLeft = bytesLeft.substr(8);\n\n      result += String.fromCharCode(parseInt(byte, 2));\n    }\n\n    return result;\n  }\n\n  generatePairs = () => {\n    const base = Math.ceil(Math.random() * 193204900099096776)\n    this.setState({ publickey: base })\n    this.setState({ privatekey: (Math.pow(base, 2)) })\n  }\n\n  enCryptWithPublic = (message, publickey) => {\n    const newmessage = this.convertToHex(message)\n    this.setState({ currenthash: newmessage * Math.pow(publickey, 2) })\n    // return this.convertToHex(message) * Math.tan(publickey)\n  }\n\n  deCryptWithPrivate = (encrypted, privatekey) => {\n    console.log(encrypted)\n    this.setState({ hiddenvalue: this.convertFromHex(encrypted / privatekey) })\n    // return this.convertFromHex(encrypted) / privatekey\n  }\n\n  render() {\n    return (\n      <div className=\"App\" className=\"App-header\">\n        <Container>\n          <Row>\n            <Col className='text-center'>\n              <br />\n              <div>\n                <h2>This key pair generator generates a 'FAB' keypair</h2>\n                <h6>(So no SRA or others, also your name is Bob for now)</h6>\n                <h6>'FAB' is a new mathematical algorithm which relates the public key to the private key, easy to crack</h6>\n                <hr style={{ borderColor: 'white', width: '100px' }} />\n                <br />\n                <Button style={{ margin: '40px' }} onClick={this.generatePairs} variant='outline-light'>Click to Generate 'FAB' KeyPair!</Button>\n\n                <InputGroup>\n                  <InputGroup.Prepend>\n                    <CopyToClipboard text={this.state.publickey}>\n                      <Button variant='light'>Public key: </Button>\n                    </CopyToClipboard>\n                  </InputGroup.Prepend>\n                  <FormControl className='input' placeholder='Share this with everyone' onClick={this.copyToClipboard} value={this.state.publickey} />\n                </InputGroup>\n                <br />\n                <InputGroup >\n                  <InputGroup.Prepend>\n                    <CopyToClipboard text={this.state.privatekey}>\n                      <Button variant='dark'>private key: </Button>\n                    </CopyToClipboard>\n                  </InputGroup.Prepend>\n                  <FormControl className='input' placeholder='Keep this secret!' value={this.state.privatekey} />\n                </InputGroup>\n                <br />\n                <h4 className='text-left' style={{ color: 'white', fontSize: '10px' }}>^ Click to copy to clipboard!</h4>\n              </div>\n            </Col>\n          </Row>\n          <Row style={{ marginTop: '40px' }}>\n            <Col md={6} sm={12}>\n              <br />\n              <h4>Encrypt a message</h4>\n              <hr align='left' style={{ borderColor: 'white', width: '100px' }} />\n              <br />\n              <Col className='text-right' style={{ color: 'white', fontSize: '10px' }}>\n                <InputGroup >\n                  <InputGroup.Prepend>\n                    <Button variant='info'>Public key:</Button>\n                  </InputGroup.Prepend>\n                  <FormControl onChange={(e) => { this.setState({ currentpublickey: e.target.value }) }} className='input' placeholder='Insert public key of receiver' />\n                </InputGroup>\n                <br />\n                <InputGroup >\n                  <InputGroup.Prepend>\n                    <Button variant='success'>Message:</Button>\n                  </InputGroup.Prepend>\n                  <FormControl className='input' onChange={(e) => { this.enCryptWithPublic(e.target.value, this.state.currentpublickey) }} placeholder='Example: hey' />\n                </InputGroup>\n                <br />\n                <InputGroup >\n                  <InputGroup.Prepend>\n                    <CopyToClipboard text={this.state.currenthash}>\n                      <Button variant='danger'>Encrypted: </Button>\n                    </CopyToClipboard>\n                  </InputGroup.Prepend>\n                  <FormControl className='input' placeholder='Encrypted message' value={this.state.currenthash} />\n                </InputGroup>\n                <br />\n                <h4 className='text-left' style={{ color: 'white', fontSize: '10px' }}>^ Click to copy to clipboard!</h4>\n              </Col>\n            </Col>\n\n            <Col md={6} sm={12}>\n              <br />\n\n              <h4>Decrypt a message</h4>\n              <hr align='left' style={{ borderColor: 'white', width: '100px' }} />\n              <br />\n              <Col className='text-left' style={{ color: 'white', fontSize: '10px' }}>\n                <InputGroup >\n                  <InputGroup.Prepend>\n                    <Button variant='danger'>Encrypted: </Button>\n                  </InputGroup.Prepend>\n                  <FormControl className='input' onChange={(e) => { this.setState({ currenthashedvalue: e.target.value }) }} placeholder='Insert encrypted message' />\n                </InputGroup>\n                <br />\n                <InputGroup >\n                  <InputGroup.Prepend>\n                    <Button variant='dark'>Private key:</Button>\n                  </InputGroup.Prepend>\n                  <FormControl className='input' onChange={(e) => { this.deCryptWithPrivate(this.state.currenthashedvalue, e.target.value) }} placeholder='Insert your private key' />\n                </InputGroup>\n                <br />\n                <InputGroup >\n                  <InputGroup.Prepend>\n                    <Button variant='success'>Decrypted:</Button>\n                  </InputGroup.Prepend>\n                  <FormControl className='input' placeholder='Decrypted message' value={this.state.hiddenvalue} />\n                </InputGroup>\n              </Col>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <br />\n              <hr align='left' style={{ borderColor: 'white', width: '200px' }} />\n              <h6>Rules:</h6>\n              <ol>\n                <li><h6>Only use <span style={{ color: 'orange' }}>simple & short</span> words to <span style={{ color: 'red' }}>Encrypt</span> , some characters are forbidden which will gave 'NaN'</h6></li>\n                <li><h6>Never share your private key</h6></li>\n                <li><h6>Use the <span style={{ fontStyle: 'italic', color: 'lightblue' }}> Public key of the receiver</span> to <span style={{ color: 'red' }}>Encrypt</span> your message</h6></li>\n                <li><h6>Send <span style={{ fontStyle: 'italic', color: 'lightblue' }}>Your own public key</span> for others to encrypt their message</h6></li>\n                <li><h6>Use <span style={{ fontStyle: 'italic', color: 'lightblue' }}>Your own private key</span> to <span style={{ color: 'orange' }}>Decrypt</span> the <span style={{ color: 'red' }}>Encrypted</span> message</h6></li>\n              </ol>\n              <div className=\"text-right\">\n                <span style={{ fontSize: '13px' }}>Fabio de Bruijn INF2E</span>\n              </div>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}